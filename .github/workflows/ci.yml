name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  KAFKA_VERSION: '7.4.0'

jobs:
  test:
    name: Testes
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: pedidos_test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      zookeeper:
        image: confluentinc/cp-zookeeper:${{ env.KAFKA_VERSION }}
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        options: >-
          --health-cmd "echo srvr | nc localhost 2181"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 2181:2181
      
      kafka:
        image: confluentinc/cp-kafka:${{ env.KAFKA_VERSION }}
        depends-on:
          zookeeper:
            condition: service_healthy
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
          KAFKA_DELETE_TOPIC_ENABLE: 'true'
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9092:9092

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Configurar variáveis de ambiente para teste
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_USERNAME=postgres" >> $GITHUB_ENV
          echo "DB_PASSWORD=password" >> $GITHUB_ENV
          echo "DB_NAME=pedidos_test_db" >> $GITHUB_ENV
          echo "DB_SYNCHRONIZE=true" >> $GITHUB_ENV
          echo "DB_LOGGING=false" >> $GITHUB_ENV
          echo "KAFKA_BROKERS=localhost:9092" >> $GITHUB_ENV
          echo "KAFKA_CLIENT_ID=meu-paozin-api-test" >> $GITHUB_ENV
          echo "KAFKA_GROUP_ID=meu-paozin-group-test" >> $GITHUB_ENV
          echo "KAFKA_CONSUMER_GROUP_ID=meu-paozin-consumer-group-test" >> $GITHUB_ENV

      - name: Aguardar serviços estarem prontos
        run: |
          echo "Aguardando PostgreSQL..."
          while ! nc -z localhost 5432; do sleep 1; done
          echo "Aguardando Kafka..."
          while ! nc -z localhost 9092; do sleep 1; done
          echo "Todos os serviços estão prontos!"

      - name: Executar linting
        run: npm run lint

      - name: Executar testes unitários
        run: npm run test

      - name: Executar testes e2e
        run: npm run test:e2e

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build da aplicação
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Build da aplicação
        run: npm run build

      - name: Testar build
        run: npm run start:prod &
          sleep 10
          curl -f http://localhost:3000/api || exit 1
          pkill -f "node dist/main"

  docker-build:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/meu-paozin-api:latest
            ${{ secrets.DOCKER_USERNAME }}/meu-paozin-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Análise de segurança
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Executar audit de segurança
        run: npm audit --audit-level=moderate

      - name: Executar Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  deploy-staging:
    name: Deploy para Staging
    runs-on: ubuntu-latest
    needs: [test, build, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy para staging
        run: |
          echo "Deploy para staging seria executado aqui"
          echo "Usando imagem: ${{ secrets.DOCKER_USERNAME }}/meu-paozin-api:${{ github.sha }}"

  deploy-production:
    name: Deploy para Produção
    runs-on: ubuntu-latest
    needs: [test, build, docker-build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy para produção
        run: |
          echo "Deploy para produção seria executado aqui"
          echo "Usando imagem: ${{ secrets.DOCKER_USERNAME }}/meu-paozin-api:${{ github.sha }}" 