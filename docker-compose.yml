services:
  # Aplicação NestJS
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: meupaozin-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=pedidos_db
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CLIENT_ID=meupaozin-api
      - KAFKA_CONSUMER_GROUP_ID=meupaozin-consumer-group
      # Datadog Configuration
      - DD_SERVICE_NAME=meu-paozin-api
      - DD_ENV=development
      - DD_VERSION=1.0.0
      - DD_TRACE_ENABLED=true
      - DD_AGENT_HOST=datadog-agent
      - DD_AGENT_PORT=8126
      - DD_LOGS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_RUNTIME_METRICS_ENABLED=true
      - DD_ANALYTICS_ENABLED=true
      - DD_LOG_INJECTION=true
      - DD_REPORT_HOSTNAME=true
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - kafka
    networks:
      - meupaozin-network
    restart: unless-stopped

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: meupaozin-postgres
    environment:
      - POSTGRES_DB=pedidos_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - meupaozin-network
    restart: unless-stopped

  # Zookeeper (necessário para o Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: meupaozin-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - meupaozin-network
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: meupaozin-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - meupaozin-network
    restart: unless-stopped

  # Kafka UI (opcional - para visualizar tópicos e mensagens)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: meupaozin-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - meupaozin-network
    restart: unless-stopped

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:

networks:
  meupaozin-network:
    driver: bridge 